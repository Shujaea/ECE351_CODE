import numpy as npimport matplotlib . pyplot as pltimport scipy . signal as sigsteps = 1e-4 # Define step sizet = np. arange (0, 10 + steps , steps ) # Add a step size to make sure the#Part 1#Task 2numG = [1,9]denG = [1,-2,-40,-64]ZG, PG, KG = sig.tf2zpk(numG, denG)numA = [1,4]denA = [1,4,3]ZA, PA, KA = sig.tf2zpk(numA, denA)numB = [1, 26, 168]ZB = np.roots(numB)print("Poles of G= ", PG)print("Zeros of G= ", ZG)print("Poles of A= ", PA)print("Zeros of A= ", ZA)print("Zeros of B= ", ZB)#Task 5num = sig . convolve (numG, numA)print ("Numerator = ", num)den = sig . convolve (denA, denG)print ("Denominator = ", den)tout, yout = sig. step (( num , den), T = t)plt. figure ( figsize = (12 , 6))plt. plot (tout, yout)plt. grid ()plt. ylabel ('y(t)')plt. xlabel ('t')plt. title ('Open-Loop Step Responce')#Part 2#Task 2num2 = sig . convolve (numA, numG)print ("Numerator2 = ", num2)den2 = sig . convolve (denA, denG + np.convolve(numG, numB))print ("Denominator2 = ", den2)Z2, P2, K2 = sig.tf2zpk(num2, den2)print("Poles of H(S)= ", P2)print("Zeros of H(S)= ", Z2)#Task 4tout2, yout2 = sig. step (( num2 , den2), T = t)plt. figure ( figsize = (10 , 20))plt. plot (tout2, yout2)plt. grid ()plt. ylabel ('y(t)')plt. xlabel ('t')plt. title ('Closed-Loop Step Responce')plt. show ()