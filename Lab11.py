import numpy as npimport scipy.signal as sigimport matplotlib.pyplot as pltdef zplane(b, a, filename = None):    """ Plot the complex z- plane given a transfer function """        from matplotlib import patches        # get a figure / plot    ax = plt.subplot(1, 1, 1)    plt.title('Figure 1: Pole-Zero Plot for H(z)')        # create the unit circle    uc = patches.Circle((0, 0), radius = 1, fill = False, color = 'black',                         ls = 'dashed')    ax.add_patch(uc)        # the coefficients are less than 1 , normalize the coefficients    if np.max(b) > 1:        kn = np.max(b)        b = np.array(b)/float(kn)    else:        kn = 1        if np.max(a) > 1:        kd = np.max(a)        a = np.array(a)/float(kd)    else:        kd = 1        # get the poles and zeros    p = np.roots(a)    z = np.roots(b)    k = kn/float(kd)        # plot the zeros and set marker properties    t1 = plt.plot(z.real, z.imag, 'o', ms = 10, label = 'Zeros')    plt.setp(t1, markersize = 10.0, markeredgewidth = 1.0)        # plot the poles and set marker properties    t2 = plt.plot(p.real, p.imag, 'x', ms = 10, label = 'Poles')    plt.setp(t2, markersize = 12.0, markeredgewidth = 3.0)        ax.spines['left'].set_position('center')    ax.spines['bottom'].set_position('center')    ax.spines['right'].set_visible(False)    ax.spines['top'].set_visible(False)        plt.legend()        # set the ticks        # r = 1.5; plt. axis ( ’ scaled ’); plt. axis ([ -r, r, -r, r])    # ticks = [ -1 , -.5 , .5 , 1]; plt. xticks ( ticks ); plt. yticks ( ticks )        if filename is None:        plt.show()    else:        plt.savefig(filename)        return z, p, k#Task 3 H(Z)/ZNumH = [2, -40]DenH = [1, -10, 16]R, P, K = sig.residuez(NumH, DenH)print("H(Z)/Z: ")print("Residue= ", R)print("Poles= ", P)print("K= ", K)#Task 4 H(Z)NumHZ = [2, -40, 0]DenHZ = [1, -10, 16]Z, P, K = zplane(NumHZ, DenHZ)print("H(Z) ")print("Zeros= ", Z)print("Poles= ", P)print("K= ", K)#Task 5w, H = sig.freqz(NumHZ, DenHZ, whole = True)f = w/(2*np.pi)Hmag = np.absolute(H)HmagDB = 20*np.log10(Hmag)Hphase = np.angle(H)*180/np.piplt.figure(figsize = (7, 5))plt.subplot(2, 1, 1)plt.title('Frequency Responce')plt.plot(f, HmagDB)plt.grid()plt.ylabel('Mag (dB)')plt.subplot(2, 1, 2)plt.plot(f, Hphase)plt.grid()plt.ylabel('Phase (deg)')plt.xlabel('f (Hz)')plt.show()