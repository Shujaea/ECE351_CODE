import numpy as npimport matplotlib.pyplot as pltsteps = 1e-4 # Define step sizet = np. arange (0, 20 + steps , steps ) #Task 1a = np.zeros((4, 1))b = np.zeros((4, 1))for k in np.arange(1, 4):    b[k] = 2* (1-np.cos(k*np.pi))/(k*np.pi)    print('a0 = ', a[0])print('a1 = ', a[1])print('b1 = ', b[1])print('b2 = ', b[2])print('b3 = ', b[3])#Task2# user defined functiondef FS(N, T, t):     y = np. zeros (t. shape )     for k in np.arange(1, N+1):        b =  2*(1-np.cos(k*np.pi))/(k*np.pi)        S = b*np.sin(k*2*np.pi*t/T)        y += S    return y T = 8X1=FS(1, T, t)X3=FS(3, T, t)X15=FS(15, T, t)X50=FS(50, T, t)X150=FS(150, T, t)X1500= FS(1500, T, t)plt. figure ( figsize = (10 , 7))plt. subplot (3, 1, 1)plt. plot (t, X1)plt. grid ()plt. ylabel ('x1(t)')plt. title (' Fourier Series Approximation of a Square Wave')plt. subplot (3, 1, 2)plt. plot (t, X3)plt. grid ()plt. ylabel ('X3(t)')plt. subplot (3, 1, 3)plt. plot (t, X15)plt. grid ()plt. ylabel ('X15(t)')plt. xlabel ('t')plt. figure ( figsize = (10 , 7))plt. subplot (3, 1, 1)plt. plot (t, X50)plt. grid ()plt. ylabel ('x50(t)')plt. title (' Fourier Series Approximation of a Square Wave')plt. subplot (3, 1, 2)plt. plot (t, X150)plt. grid ()plt. ylabel ('X150(t)')plt. subplot (3, 1, 3)plt. plot (t, X1500)plt. grid ()plt. ylabel ('X1500(t)')plt. xlabel ('t')plt. show ()